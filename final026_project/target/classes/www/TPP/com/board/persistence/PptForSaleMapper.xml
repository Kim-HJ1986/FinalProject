<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="www.TPP.com.board.persistence.PptForSaleMapper">
	<resultMap type="www.TPP.com.board.model.PptForSaleVO"
		id="pptForSaleMap"
		extends="www.TPP.com.board.persistence.PostMapper.postMap">
		<id property="pptForSaleId" column="ppt_for_sale_id"></id>
		<result property="title" column="title"></result>
		<result property="content" column="content"></result>
		<result property="weight" column="weight"></result>
		<result property="price" column="price"></result>
		<result property="userId" column="user_id"></result>
		<result property="locationId" column="location_id"></result>
		<result property="categoryId" column="category_id"></result>
		<result property="postId" column="post_id"></result>
		<collection property="listAttach" columnPrefix="ff_" 
			resultMap="www.TPP.com.common.attachFile.persistence.AttachFileVOMapper.rmAttachFileVO">
		</collection>
	</resultMap>


	<!-- List<PptForSaleVO> getPptForSaleList(@Param("postId") String postId); -->
	<select id="getPptForSaleList" resultMap="pptForSaleMap">
		SELECT ppt.*, ff.uuid ff_uuid, ff.saved_folder_path ff_saved_folder_path,
		   ff.pure_file_name ff_pure_file_name, ff.multi_media_type ff_multi_media_type
		FROM f_ppt_for_sale ppt
		LEFT OUTER JOIN fm_ppt_attach fm on ppt.ppt_for_sale_id = fm.ppt_for_sale_id
		LEFT OUTER JOIN f_attach_file ff on fm.uuid = ff.uuid
		WHERE ppt.post_id = #{postId}
	</select>

	<!-- PptForSaleVO getPptForSale(@Param("postId") String postId); -->
	<select id="getPptForSale" resultMap="pptForSaleMap">
		SELECT ppt.*, ff.uuid ff_uuid, ff.saved_folder_path ff_saved_folder_path,
		   ff.pure_file_name ff_pure_file_name, ff.multi_media_type ff_multi_media_type
		FROM f_ppt_for_sale ppt
		LEFT OUTER JOIN fm_ppt_attach fm on ppt.ppt_for_sale_id = fm.ppt_for_sale_id
		LEFT OUTER JOIN f_attach_file ff on fm.uuid = ff.uuid
		WHERE ppt.post_id = #{postId}
	</select>

	<!-- int registerPost(@Param("pptForSale") PptForSaleVO pptForSale, @Param("post") 
		PostVO post, @Param("location") LocationVO location, @Param("productCategory") 
		ProductCategoryVO productCategory); -->
	<insert id="registerPost">
		<selectKey keyProperty="pptForSale.pptForSaleId"
			order="BEFORE" resultType="string">
			SELECT get_id(sq_product_id.nextval) from
			dual
		</selectKey>
		INSERT INTO f_ppt_for_sale(ppt_for_sale_id, title, content, weight,
		price, user_id, location_id, category_id, post_id)
		VALUES(#{pptForSale.pptForSaleId}, #{pptForSale.title},
		#{pptForSale.content},
		#{pptForSale.weight}, #{pptForSale.price}, #{pptForSale.userId}, #{location.locationId},
		#{productCategory.productCategoryId}, #{post.postId})
	</insert>

	<!-- int updatePptForSale(PptForSaleVO pptForSale); -->
	<update id="updatePptForSale">
		UPDATE f_ppt_for_sale
		set
		title = #{title},
		weight = #{weight},
		content = #{content},
		price = #{price}
		WHERE ppt_for_sale_id = #{pptForSaleId}
	</update>

	<!-- public boolean deletePptForSale(@Param("post") PostVO post, @Param("pptForSale") 
		PptForSaleVO pptForSale); -->
	<delete id="deletePptForSale">
		DELETE f_ppt_for_sale
		WHERE post_id = #{post.postId}
		or ppt_for_sale_id like #{pptForSale.pptForSaleId} || '%'
	</delete>
	<!-- ********************************* 댓글 처리 함수 정의 영역 ********************************* -->

	<!-- public List<PptForSaleVO> getReplyListWithPaging(@Param("originalId") 
		String originalId, @Param("idLength") String idLength, @Param("cri") Criteria 
		cri); -->
	<select id="getReplyListWithPaging" resultMap="pptForSaleMap">
   <![CDATA[
   select p.*
     from (
          SELECT *
          FROM f_ppt_for_sale
         where ppt_for_sale_id like #{originalId} || '%'
           and length(f_ppt_for_sale.ppt_for_sale_id) = #{idLength}
         ORDER BY ppt_for_sale_id DESC
        OFFSET (#{cri.pageNumber} - 1) * #{cri.amount} ROWS FETCH FIRST #{cri.amount} ROWS ONLY
          ) p, f_party w
    where p.user_id = w.user_id   ]]>
	</select>

	<!-- public PptForSaleVO findReplyById(String pptForSaleId); -->
	<select id="findReplyById" resultMap="pptForSaleMap">
	<![CDATA[
	select p.*
	  from f_ppt_for_sale p, f_party w
	 where p.ppt_for_sale_id = #{pptForSaleId}
	   and p.user_id = w.user_id
	]]>
	</select>

	<!-- public int insertReply(@Param("original") String originalId, @Param("pptForSale") 
		PptForSaleVO pptForSale); -->
	<insert id="insertReply">
		<selectKey keyProperty="pptForSale.pptForSaleId"
			order="BEFORE" resultType="String">
			select #{originalId} || get_id(sq_ppt_for_sale.nextval) from dual
		</selectKey>
		insert into f_ppt_for_sale(ppt_for_sale_id, user_id, content)
		values(#{pptForSale.pptForSaleId}, #{pptForSale.userId},
		#{pptForSale.content})
	</insert>

	<!-- public int updateReply(@Param("pptForSale") PptForSaleVO pptForSale); -->
	<update id="updateReply">
		update f_ppt_for_sale
		set content = #{pptForSale.content},
		upt_dt = sysdate
		where ppt_for_sale_id = #{pptForSale.pptForSaleId}
	</update>

	<!--public int deleteReplyById(String id); -->
	<delete id="deleteReplyById">
		delete from f_ppt_for_sale where ppt_for_sale_id like #{id} || '%'
	</delete>

</mapper>